generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  CHECKOUT
  SERVICE
  KITCHEN
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
}

model User {
  id        String    @id @default(uuid())
  name      String
  username  String    @unique
  avatarUrl String?   @map("avatar_url")
  password  String
  role      UserRole  @default(SERVICE)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  Order      Order[]
  OrderItems OrderItems[]

  @@map("users")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  Product Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Decimal   @db.Decimal(10, 2)
  imageUrl    String?   @default("https://placehold.co/200") @map("image_url")
  categoryId  String?   @map("category_id")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  category  Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  OrderItem OrderItems[]

  @@map("products")
}

model Order {
  id         String    @id @default(uuid())
  table      Int
  clientId   Int       @map("client_id")
  totalPrice Decimal?  @map("total_price") @db.Decimal(10, 2)
  isFinished Boolean   @default(false) @map("is_finished")
  userId     String?   @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  user  User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  items OrderItems[]

  @@map("orders")
}

model OrderItems {
  id          String          @id @default(uuid())
  orderId     String          @map("order_id")
  productId   String          @map("product_id")
  quantity    Int
  observation String?
  status      OrderItemStatus @default(PENDING)
  userId      String?         @map("user_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("order_items")
}
